{"ast":null,"code":"/**\n * @license agm-direction\n * MIT license\n */\n\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { GoogleMapsAPIWrapper } from '@agm/core';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@agm/core';\nlet AgmDirection = /*#__PURE__*/(() => {\n  class AgmDirection {\n    constructor(gmapsApi) {\n      this.gmapsApi = gmapsApi;\n      this.waypoints = [];\n      this.optimizeWaypoints = true;\n      this.provideRouteAlternatives = false;\n      this.avoidHighways = false;\n      this.avoidTolls = false;\n      this.avoidFerries = false;\n      // Remove or draw direction\n      this.visible = true;\n      // Direction change event handler\n      this.onChange = new EventEmitter();\n      // Direction response for the new request\n      this.onResponse = new EventEmitter();\n      // Send a custom infowindow\n      this.sendInfoWindow = new EventEmitter();\n      // Status of Directions Query (google.maps.DirectionsStatus.OVER_QUERY_LIMIT)\n      this.status = new EventEmitter();\n      // Marker drag event handler\n      this.originDrag = new EventEmitter();\n      this.destinationDrag = new EventEmitter();\n      this.waypointsMarker = [];\n      // Use for visible flag\n      this.isFirstChange = true;\n    }\n    ngOnInit() {\n      if (this.visible === true) {\n        this.directionDraw();\n      }\n    }\n    ngOnChanges(obj) {\n      /**\r\n       * When visible is false then remove the direction layer\r\n       */\n      if (!this.visible) {\n        try {\n          this.removeMarkers();\n          this.removeDirections();\n        } catch (e) {}\n      } else {\n        if (this.isFirstChange) {\n          /**\r\n           * When visible is false at the first time\r\n           */\n          if (typeof this.directionsRenderer === 'undefined') {\n            this.directionDraw();\n          }\n          this.isFirstChange = false;\n          return;\n        }\n        /**\r\n         * When renderOptions are not first change then reset the display\r\n         */\n        if (typeof obj.renderOptions !== 'undefined') {\n          if (obj.renderOptions.firstChange === false) {\n            this.removeMarkers();\n            this.removeDirections();\n          }\n        }\n        this.directionDraw();\n      }\n    }\n    ngOnDestroy() {\n      this.destroyMarkers();\n      this.removeDirections();\n    }\n    /**\r\n     * This event is fired when the user creating or updating this direction\r\n     */\n    directionDraw() {\n      this.gmapsApi.getNativeMap().then(_map => {\n        const map = _map;\n        if (typeof this.directionsRenderer === 'undefined') {\n          this.directionsRenderer = new google.maps.DirectionsRenderer(this.renderOptions);\n          // @ts-ignore\n          this.directionsRenderer.setMap(map);\n          this.directionsRenderer.addListener('directions_changed', () => {\n            this.onChange.emit(this.directionsRenderer.getDirections());\n          });\n        }\n        if (typeof this.directionsService === 'undefined') {\n          this.directionsService = new google.maps.DirectionsService();\n        }\n        if (typeof this.panel === 'undefined') {\n          // @ts-ignore\n          this.directionsRenderer.setPanel(null);\n        } else {\n          this.directionsRenderer.setPanel(this.panel);\n        }\n        // Render exist direction\n        if (this.renderRoute) {\n          this.directionsRenderer.setDirections(this.renderRoute);\n          this.renderRoute = undefined;\n        } else {\n          // Request new direction\n          this.directionsService.route({\n            origin: this.origin,\n            destination: this.destination,\n            travelMode: this.travelMode || google.maps.TravelMode.DRIVING,\n            transitOptions: this.transitOptions,\n            drivingOptions: this.drivingOptions,\n            waypoints: this.waypoints,\n            optimizeWaypoints: this.optimizeWaypoints,\n            provideRouteAlternatives: this.provideRouteAlternatives,\n            avoidHighways: this.avoidHighways,\n            avoidTolls: this.avoidTolls,\n            avoidFerries: this.avoidFerries,\n            unitSystem: this.unitSystem\n          }, (response, status) => {\n            this.onResponse.emit(response);\n            // Emit Query Status\n            this.status.emit(status);\n            /**\r\n             * DirectionsStatus\r\n             * https://developers.google.com/maps/documentation/javascript/directions#DirectionsStatus\r\n             */\n            switch (status) {\n              case google.maps.DirectionsStatus.OK:\n                this.directionsRenderer.setDirections(response);\n                /**\r\n                 * Emit The DirectionsResult Object\r\n                 * https://developers.google.com/maps/documentation/javascript/directions?hl=en#DirectionsResults\r\n                 */\n                // Custom Markers\n                if (typeof this.markerOptions !== 'undefined') {\n                  this.destroyMarkers();\n                  // Set custom markers\n                  const _route = response.routes[0].legs[0];\n                  try {\n                    // Origin Marker\n                    if (typeof this.markerOptions.origin !== 'undefined') {\n                      this.markerOptions.origin.map = map;\n                      this.markerOptions.origin.position = _route.start_location;\n                      this.originMarker = this.setMarker(map, this.originMarker, this.markerOptions.origin, _route.start_address);\n                      if (this.markerOptions.origin.draggable) {\n                        this.originMarker.addListener('dragend', () => {\n                          this.origin = this.originMarker.position;\n                          this.directionDraw();\n                          this.originDrag.emit(this.origin);\n                        });\n                      }\n                    }\n                    // Destination Marker\n                    if (typeof this.markerOptions.destination !== 'undefined') {\n                      this.markerOptions.destination.map = map;\n                      this.markerOptions.destination.position = _route.end_location;\n                      this.destinationMarker = this.setMarker(map, this.destinationMarker, this.markerOptions.destination, _route.end_address);\n                      if (this.markerOptions.destination.draggable) {\n                        this.destinationMarker.addListener('dragend', () => {\n                          this.destination = this.destinationMarker.position;\n                          this.directionDraw();\n                          this.destinationDrag.emit(this.destination);\n                        });\n                      }\n                    }\n                    // Waypoints Marker\n                    if (typeof this.markerOptions.waypoints !== 'undefined') {\n                      this.waypoints.forEach((waypoint, index) => {\n                        // If waypoints are not array then set all the same\n                        if (!Array.isArray(this.markerOptions.waypoints)) {\n                          this.markerOptions.waypoints.map = map;\n                          this.markerOptions.waypoints.position = _route.via_waypoints[index];\n                          this.waypointsMarker.push(this.setMarker(map, waypoint, this.markerOptions.waypoints, _route.via_waypoints[index]));\n                        } else {\n                          this.markerOptions.waypoints[index].map = map;\n                          this.markerOptions.waypoints[index].position = _route.via_waypoints[index];\n                          this.waypointsMarker.push(this.setMarker(map, waypoint, this.markerOptions.waypoints[index], _route.via_waypoints[index]));\n                        }\n                      }); // End forEach\n                    }\n                  } catch (err) {\n                    console.error('MarkerOptions error.', err);\n                  }\n                }\n                break;\n              case google.maps.DirectionsStatus.OVER_QUERY_LIMIT:\n                console.warn('The webpage has sent too many requests within the allowed time period.');\n                break;\n              default:\n                // console.warn(status);\n                break;\n            } // End switch\n          });\n        }\n      });\n    }\n    /**\r\n     * Custom Origin and Destination Icon\r\n     * @param map map\r\n     * @param marker marker\r\n     * @param markerOpts properties\r\n     * @param content marker's infowindow content\r\n     * @returns new marker\r\n     * @memberof AgmDirection\r\n     */\n    setMarker(map, marker, markerOpts, content) {\n      if (typeof this.infoWindow === 'undefined') {\n        this.infoWindow = new google.maps.InfoWindow();\n        this.sendInfoWindow.emit(this.infoWindow);\n      }\n      marker = new google.maps.Marker(markerOpts);\n      // https://developers.google.com/maps/documentation/javascript/reference/marker?hl=zh-tw#MarkerOptions.clickable\n      if (marker.getClickable()) {\n        marker.addListener('click', () => {\n          const infowindoContent = typeof markerOpts.infoWindow === 'undefined' ? content : markerOpts.infoWindow;\n          this.infoWindow.setContent(infowindoContent);\n          this.infoWindow.open(map, marker);\n        });\n      }\n      return marker;\n    }\n    /**\r\n     * This event is fired when remove markers\r\n     */\n    removeMarkers() {\n      if (typeof this.originMarker !== 'undefined') {\n        this.originMarker.setMap(null);\n      }\n      if (typeof this.destinationMarker !== 'undefined') {\n        this.destinationMarker.setMap(null);\n      }\n      this.waypointsMarker.forEach(w => {\n        if (typeof w !== 'undefined') {\n          w.setMap(null);\n        }\n      });\n    }\n    /**\r\n     * This event is fired when remove directions\r\n     */\n    removeDirections() {\n      if (this.directionsRenderer !== undefined) {\n        // @ts-ignore\n        this.directionsRenderer.setPanel(null);\n        this.directionsRenderer.setMap(null);\n        // @ts-ignore\n        this.directionsRenderer = undefined;\n      }\n    }\n    /**\r\n     * This event is fired when destroy markers\r\n     */\n    destroyMarkers() {\n      // Remove origin markers\n      try {\n        if (typeof this.originMarker !== 'undefined') {\n          google.maps.event.clearListeners(this.originMarker, 'click');\n          if (this.markerOptions.origin.draggable) {\n            google.maps.event.clearListeners(this.originMarker, 'dragend');\n          }\n        }\n        if (typeof this.destinationMarker !== 'undefined') {\n          google.maps.event.clearListeners(this.destinationMarker, 'click');\n          if (this.markerOptions.origin.draggable) {\n            google.maps.event.clearListeners(this.destinationMarker, 'dragend');\n          }\n        }\n        this.waypointsMarker.forEach(w => {\n          if (typeof w !== 'undefined') {\n            google.maps.event.clearListeners(w, 'click');\n          }\n        });\n        this.removeMarkers();\n      } catch (err) {\n        console.error('Can not reset custom marker.', err);\n      }\n    }\n  }\n  AgmDirection.ɵfac = function AgmDirection_Factory(t) {\n    return new (t || AgmDirection)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GoogleMapsAPIWrapper));\n  };\n  AgmDirection.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AgmDirection,\n    selectors: [[\"agm-direction\"]],\n    inputs: {\n      waypoints: \"waypoints\",\n      optimizeWaypoints: \"optimizeWaypoints\",\n      provideRouteAlternatives: \"provideRouteAlternatives\",\n      avoidHighways: \"avoidHighways\",\n      avoidTolls: \"avoidTolls\",\n      avoidFerries: \"avoidFerries\",\n      visible: \"visible\",\n      renderRoute: \"renderRoute\",\n      origin: \"origin\",\n      destination: \"destination\",\n      infoWindow: \"infoWindow\",\n      travelMode: \"travelMode\",\n      transitOptions: \"transitOptions\",\n      drivingOptions: \"drivingOptions\",\n      unitSystem: \"unitSystem\",\n      renderOptions: \"renderOptions\",\n      panel: \"panel\",\n      markerOptions: \"markerOptions\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onResponse: \"onResponse\",\n      sendInfoWindow: \"sendInfoWindow\",\n      status: \"status\",\n      originDrag: \"originDrag\",\n      destinationDrag: \"destinationDrag\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return AgmDirection;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AgmDirectionModule = /*#__PURE__*/(() => {\n  class AgmDirectionModule {\n    static forRoot() {\n      return {\n        ngModule: AgmDirectionModule\n      };\n    }\n    static forChild() {\n      return {\n        ngModule: AgmDirectionModule\n      };\n    }\n  }\n  AgmDirectionModule.ɵfac = function AgmDirectionModule_Factory(t) {\n    return new (t || AgmDirectionModule)();\n  };\n  AgmDirectionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AgmDirectionModule\n  });\n  AgmDirectionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return AgmDirectionModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgmDirectionModule, {\n    declarations: [AgmDirection],\n    exports: [AgmDirection]\n  });\n})();\n\n// Public classes.\n\n/**\r\n * Angular library starter\r\n * Build an Angular library compatible with AoT compilation & Tree shaking like an official package\r\n * Copyright Roberto Simonetti\r\n * MIT license\r\n * https://github.com/robisim74/angular-library-starter\r\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AgmDirection, AgmDirectionModule };\n\n//# sourceMappingURL=agm-direction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}